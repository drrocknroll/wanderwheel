"""
main.py

–í–µ—Ä—Å–∏—è 1.1 (–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –µ–¥–∏–Ω—ã–π cards.json –±–µ–∑ regions_config).
–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ 'Start / –°—Ç–∞—Ä—Ç', 'Go!', 'Return / –í–µ—Ä–Ω—É—Ç—å—Å—è' –∏ –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –≥–æ—Ä–æ–¥–∞.
–§–∞–π–ª—ã —Ñ–∞–∫—Ç–æ–≤/–∫–≤–∏–∑–æ–≤ –±–µ—Ä—ë–º –∏–∑ cards.json (–æ–±—â–∏–π).

–í cards.json —É –∫–∞—Ä—Ç–æ—á–µ–∫ –µ—Å—Ç—å –ø–æ–ª—è:
  "language": "ru"/"en"/"cn"
  "city": "moscow"/"spb" (–∏–Ω–æ–≥–¥–∞ –≤ location)
  "interactive": true/false
  ...–∏ —Ç.–¥.

80% -> —Ñ–∞–∫—Ç, 20% -> –∫–≤–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å).
"""

import logging
import random
import json
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
import config  # –§–∞–π–ª —Å API_TOKEN

logging.basicConfig(level=logging.INFO)
logging.info("=== BOT STARTED: "WanderWheel" VERSION 1.2 (Single cards.json) ===")

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# ---------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —è–∑—ã–∫, –≥–æ—Ä–æ–¥
# ---------------------------
USER_LANGS = {}  # { user_id: {"language": "RU"/"EN"/"CN", "city": "moscow"/"spb"/"all"} }

LANG_OPTIONS = ["RU", "EN", "CN"]

CITY_OPTIONS = {
    "RU": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–í—Å–µ"],
    "EN": ["Moscow", "Saint Petersburg", "All"],
    "CN": ["Ëé´ÊñØÁßë", "Âú£ÂΩºÂæóÂ†°", "ÂÖ®ÈÉ®"]
}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å –∫–ª—é—á–∞–º–∏ –≤ JSON
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ cards.json city –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è "moscow"/"spb"/"all"
CITY_MAP = {
    "–ú–æ—Å–∫–≤–∞": "moscow",
    "Moscow": "moscow",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "Saint Petersburg": "spb",
    "Ëé´ÊñØÁßë": "moscow",
    "Âú£ÂΩºÂæóÂ†°": "spb",
    "–í—Å–µ": "all",
    "All": "all",
    "ÂÖ®ÈÉ®": "all"
}


# ---------------------------
# 2. –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
# ---------------------------
def load_cards() -> list:
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ data/cards.json.
    """
    path = Path(__file__).parent / "data" / "cards.json"
    if not path.exists():
        logging.error(f"cards.json not found: {path}")
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            else:
                logging.error("cards.json: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º JSON-–æ–±—ä–µ–∫—Ç–æ–≤!")
                return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cards.json: {e}")
        return []


def get_filtered_cards(lang: str, city: str) -> (list, list):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ cards.json, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–æ —è–∑—ã–∫—É (lang) –∏ –≥–æ—Ä–æ–¥—É (city),
    –∏ –¥–µ–ª–∏—Ç –∏—Ö –Ω–∞ –æ–±—ã—á–Ω—ã–µ (facts) –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ (quizzes).
    
    'city' –º–æ–∂–µ—Ç –±—ã—Ç—å "moscow", "spb" –∏–ª–∏ "all".
    'lang' –º–æ–∂–µ—Ç –±—ã—Ç—å "RU"/"EN"/"CN".
    
    –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ location –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —É –¥—Ä—É–≥–∏—Ö ‚Äî —Å–ª–æ–≤–∞—Ä—ë–º:
      - –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å, —Ç–æ location.get("city") –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–æ—Ä–æ–¥–∞.
      - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.
    """
    all_cards = load_cards()
    facts = []
    quizzes = []

    # –ü—Ä–∏–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    lang = lang.lower()   # "ru", "en", "cn"
    city = city.lower()   # "moscow", "spb", "all"

    for c in all_cards:
        # –Ø–∑—ã–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        card_lang = c.get("language", "").lower()
        if card_lang != lang:
            # –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —è–∑—ã–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ location, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å str –∏–ª–∏ dict
        loc = c.get("location", {})
        if isinstance(loc, dict):
            # location ‚Äì —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            card_city = loc.get("city", "").lower()
        elif isinstance(loc, str):
            # location ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            card_city = loc.lower()
        else:
            card_city = ""

        # –ï—Å–ª–∏ city == "all", –ø–æ–¥–æ–π–¥—ë—Ç –ª—é–±–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        if city != "all" and card_city != city:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤
        if c.get("interactive", False) is True:
            quizzes.append(c)
        else:
            facts.append(c)

        logging.info(f"CARD_ID={c.get('id')} card_lang={card_lang} card_city={card_city}")

    logging.info(f"Found {len(facts)} facts, {len(quizzes)} quizzes for language={lang} city={city}")
    return (facts, quizzes)


# ---------------------------
# 3. –ö–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞
# ---------------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RU + all
    USER_LANGS[user_id] = {"language": "RU", "city": "all"}

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("Start / –°—Ç–∞—Ä—Ç")
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WanderWheel!\n–ù–∞–∂–º–∏—Ç–µ 'Start / –°—Ç–∞—Ä—Ç' –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text == "Start / –°—Ç–∞—Ä—Ç")
async def choose_language(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang in LANG_OPTIONS:
        kb.add(lang)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / ÈÄâÊã©ËØ≠Ë®Ä:", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in LANG_OPTIONS)
async def language_selection(message: types.Message):
    user_id = message.from_user.id
    chosen_lang = message.text  # "RU"/"EN"/"CN"
    USER_LANGS[user_id]["language"] = chosen_lang

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[chosen_lang]:
        kb.add(city_name)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in sum(CITY_OPTIONS.values(), []))
async def city_selection(message: types.Message):
    user_id = message.from_user.id
    city_raw = message.text  # e.g. "–ú–æ—Å–∫–≤–∞", "All", ...
    city_key = CITY_MAP.get(city_raw, "all")  # "moscow"/"spb"/"all"
    USER_LANGS[user_id]["city"] = city_key

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city_raw}. –ù–∞–∂–º–∏—Ç–µ 'Go!' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text == "Go!")
async def spin_wheel(message: types.Message):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Go! 80% -> —Ñ–∞–∫—Ç, 20% -> –∫–≤–∏–∑."""
    user_id = message.from_user.id
    if user_id not in USER_LANGS:
        await cmd_start(message)
        return

    roll = random.randint(1, 100)
    logging.info(f"User {user_id} pressed Go! -> Random roll = {roll}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏
    lang = USER_LANGS[user_id]["language"]
    city = USER_LANGS[user_id]["city"]
    facts, quizzes = get_filtered_cards(lang, city)

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –∏ –Ω–µ—Ç –∫–≤–∏–∑–æ–≤
    if not facts and not quizzes:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞/–≥–æ—Ä–æ–¥–∞.")
        return

    # 20% -> –∫–≤–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ —Ñ–∞–∫—Ç
    if roll <= 20 and quizzes:
        quiz_card = random.choice(quizzes)
        await send_quiz_card(message, quiz_card)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–∫—Ç –µ—Å—Ç—å, –±–µ—Ä—ë–º —Ñ–∞–∫—Ç, –∏–Ω–∞—á–µ –∫–≤–∏–∑
        if facts:
            fact_card = random.choice(facts)
            await send_fact_card(message, fact_card)
        else:
            # –§–∞–∫—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∫–≤–∏–∑—ã
            quiz_card = random.choice(quizzes)
            await send_quiz_card(message, quiz_card)


async def send_fact_card(message: types.Message, card: dict):
    """
    –í—ã–≤–æ–¥–∏–º –æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (fact).
    card["title"], card["text"], ...
    """
    # title, text –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    text_msg = (
        f"{card.get('icon','')} {card.get('title','')}\n"
        f"{card.get('text','')}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å location –∏ –æ–Ω–æ —Å–ª–æ–≤–∞—Ä—å -> –¥–æ–±–∞–≤–∏–º –∞–¥—Ä–µ—Å
    loc = card.get("location", {})
    if isinstance(loc, dict):
        addr = loc.get("address", "")
        if addr:
            text_msg += f"\nüìç {addr}"
        # –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ GPS -> —Å—Å—ã–ª–∫–∞
        gps = loc.get("gps", {})
        if "lat" in gps and "lng" in gps:
            lat, lng = gps["lat"], gps["lng"]
            maps_link = f"https://maps.google.com/?q={lat},{lng}"
            text_msg += f"\n[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({maps_link})"
    elif isinstance(loc, str):
        # location ‚Äì —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º
        text_msg += f"\nüìç {loc}"

    await message.answer(text_msg, parse_mode="Markdown")

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await message.answer("–ù–∞–∂–º–∏—Ç–µ Go! –∏–ª–∏ –í–µ—Ä–Ω—É—Ç—å—Å—è", reply_markup=kb)


async def send_quiz_card(message: types.Message, card: dict):
    """
    –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É-–∫–≤–∏–∑. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ card –µ—Å—Ç—å –ø–æ–ª—è:
      "question", "options" (array), "correct_index" (—á–∏—Å–ª–æ)
    """
    question = card.get("question", "–í–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω.")
    options = card.get("options", [])
    correct_idx = card.get("correct_index", 0)

    kb = types.InlineKeyboardMarkup()
    for i, opt in enumerate(options):
        callback_data = f"quiz:{card.get('id','')}:{i}:{correct_idx}"
        kb.add(types.InlineKeyboardButton(f"{i+1}) {opt}", callback_data=callback_data))

    await message.answer(question, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("quiz:"))
async def process_quiz_answer(callback_query: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç quiz:<card_id>:<user_choice>:<correct_idx>
    parts = callback_query.data.split(":")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–≤–∏–∑–∞", show_alert=True)
        return

    quiz_id = parts[1]
    user_choice_str = parts[2]
    correct_idx_str = parts[3]

    try:
        user_choice = int(user_choice_str)
        correct_idx = int(correct_idx_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤", show_alert=True)
        return

    if user_choice == correct_idx:
        answer_text = "–í–µ—Ä–Ω–æ!"
    else:
        answer_text = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_idx+1}"

    await callback_query.message.answer(answer_text)
    await callback_query.answer()

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await callback_query.message.answer("–ù–∞–∂–º–∏—Ç–µ Go! –∏–ª–∏ –í–µ—Ä–Ω—É—Ç—å—Å—è", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text == "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def return_handler(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'Return / –í–µ—Ä–Ω—É—Ç—å—Å—è' ‚Äî —Å–ø—Ä–æ—Å–∏–º, —á—Ç–æ –º–µ–Ω—è—Ç—å: —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥.
    """
    user_id = message.from_user.id
    curr_lang = USER_LANGS.get(user_id, {}).get("language", "RU")

    if curr_lang == "RU":
        text_ = "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥?"
        opt_lang = "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        opt_city = "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
    elif curr_lang == "EN":
        text_ = "What do you want to change: language or city?"
        opt_lang = "Change language"
        opt_city = "Change city"
    else:
        text_ = "ÊÇ®ÊÉ≥Êõ¥Êîπ‰ªÄ‰πàÔºöËØ≠Ë®ÄËøòÊòØÂüéÂ∏ÇÔºü"
        opt_lang = "Êõ¥ÊîπËØ≠Ë®Ä"
        opt_city = "Êõ¥ÊîπÂüéÂ∏Ç"

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(opt_lang, opt_city)
    await message.answer(text_, reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in ["–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "Change language", "Êõ¥ÊîπËØ≠Ë®Ä"])
async def change_language(message: types.Message):
    user_id = message.from_user.id
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang in LANG_OPTIONS:
        kb.add(lang)

    if USER_LANGS[user_id]["language"] == "RU":
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    elif USER_LANGS[user_id]["language"] == "EN":
        txt = "Select language:"
    else:
        txt = "ÈÄâÊã©ËØ≠Ë®Ä:"

    await message.answer(txt, reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "Change city", "Êõ¥ÊîπÂüéÂ∏Ç"])
async def change_city(message: types.Message):
    user_id = message.from_user.id
    lang = USER_LANGS[user_id]["language"]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[lang]:
        kb.add(city_name)

    if lang == "RU":
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    elif lang == "EN":
        txt = "Choose city:"
    else:
        txt = "ËØ∑ÈÄâÊã©ÂüéÂ∏ÇÔºö"

    await message.answer(txt, reply_markup=kb)


# -----------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
