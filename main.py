"""
main.py

–í–µ—Ä—Å–∏—è 1.2.01

- –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ data/cards.json.
- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ (/start, /lang) –∏ –≥–æ—Ä–æ–¥–∞.
- –ö–Ω–æ–ø–∫–∞ "Go!" —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–æ–ª–µ—Å–∞.
- 80% —Ñ–∞–∫—Ç, 20% –∫–≤–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–≤–∏–∑).
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —è–∑—ã–∫—É (ru/en/cn) –∏ –≥–æ—Ä–æ–¥—É (moscow/spb/all).
- Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω.
- –ö–æ–º–∞–Ω–¥–∞ "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è" –¥–ª—è —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫.
- –û—Ç–∫–ª—é—á—ë–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ Google Maps (disable_web_page_preview=True).
"""

import logging
import random
import json
import asyncio
from pathlib import Path

import subprocess

# –ó–∞–ø—É—Å–∫–∞–µ–º setup.py, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp
subprocess.run(["python", "setup.py"], check=True)

from aiogram import Bot, Dispatcher, executor, types
import config  # –§–∞–π–ª —Å API_TOKEN

logging.basicConfig(level=logging.INFO)
logging.info("=== BOT STARTED: 'WanderWheel' VERSION 1.2.01 (Single cards.json) ===")

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# ---------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —è–∑—ã–∫, –≥–æ—Ä–æ–¥
# ---------------------------

# –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: { user_id: {"language": "ru", "city": "moscow"} }
USER_LANGS = {}

# –Ø–∑—ã–∫–æ–≤—ã–µ –æ–ø—Ü–∏–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –í–ï–†–•–ù–ï–ú —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ö—Ä–∞–Ω–∏–º –≤ –Ω–∏–∂–Ω–µ–º)
LANG_OPTIONS = ["ru", "en", "cn"]

# –ì–æ—Ä–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
CITY_OPTIONS = {
    "ru": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–í—Å–µ"],
    "en": ["Moscow", "Saint Petersburg", "All"],
    "cn": ["Ëé´ÊñØÁßë", "Âú£ÂΩºÂæóÂ†°", "ÂÖ®ÈÉ®"]
}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) ‚Üí –∫–ª—é—á "moscow"/"spb"/"all"
CITY_MAP = {
    "–º–æ—Å–∫–≤–∞": "moscow",
    "moscow": "moscow",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "saint petersburg": "spb",
    "spb": "spb",
    "Ëé´ÊñØÁßë": "moscow",
    "Âú£ÂΩºÂæóÂ†°": "spb",
    "–≤—Å–µ": "all",
    "all": "all",
    "ÂÖ®ÈÉ®": "all"
}


# ---------------------------
# 2. –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
# ---------------------------

def load_cards() -> list:
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ data/cards.json.
    """
    path = Path(__file__).parent / "data" / "cards.json"
    if not path.exists():
        logging.error(f"cards.json not found: {path}")
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            else:
                logging.error("cards.json –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º JSON-–æ–±—ä–µ–∫—Ç–æ–≤!")
                return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cards.json: {e}")
        return []


def get_filtered_cards(lang: str, city: str) -> (list, list):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ cards.json, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —è–∑—ã–∫—É (lang) –∏ –≥–æ—Ä–æ–¥—É (city),
    –∏ –¥–µ–ª–∏—Ç –∏—Ö –Ω–∞ —Ñ–∞–∫—Ç—ã (facts) –∏ –∫–≤–∏–∑—ã (quizzes).

    lang: "ru", "en", "cn"
    city: "moscow", "spb", "all"

    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "city" –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è,
    –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ, —Å–º–æ—Ç—Ä–∏–º location.city (–∏–ª–∏ location, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞).
    """
    all_cards = load_cards()
    facts = []
    quizzes = []

    lang = lang.lower()   # "ru", "en", "cn"
    city = city.lower()   # "moscow", "spb", "all"

    for c in all_cards:
        card_lang = c.get("language", "").lower()
        if card_lang != lang:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "city"
        card_city = c.get("city", "").lower()
        if not card_city:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ location
            loc = c.get("location", {})
            if isinstance(loc, dict):
                card_city = loc.get("city", "").lower()
            elif isinstance(loc, str):
                card_city = loc.lower()
            else:
                card_city = ""

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
        if city != "all" and card_city != city:
            continue

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî –∫–≤–∏–∑—ã, –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ ‚Äî —Ñ–∞–∫—Ç—ã
        if c.get("interactive", False) is True:
            quizzes.append(c)
        else:
            facts.append(c)

        logging.info(f"CARD_ID={c.get('id')} card_lang={card_lang} card_city={card_city}")

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(facts)} —Ñ–∞–∫—Ç–æ–≤, {len(quizzes)} –∫–≤–∏–∑–æ–≤ –¥–ª—è lang={lang} city={city}")
    return (facts, quizzes)


# ---------------------------
# 3. –ö–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞
# ---------------------------

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏–º "ru" –∏ "all"
    USER_LANGS[user_id] = {"language": "ru", "city": "all"}

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("Start / –°—Ç–∞—Ä—Ç")
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WanderWheel!\n–ù–∞–∂–º–∏—Ç–µ 'Start / –°—Ç–∞—Ä—Ç' –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.",
        reply_markup=kb
    )


@dp.message_handler(commands=['lang'])
async def cmd_change_lang(message: types.Message):
    """
    –ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ /lang –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    """
    await change_language(message)


@dp.message_handler(lambda msg: msg.text == "Start / –°—Ç–∞—Ä—Ç")
async def choose_language(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang in LANG_OPTIONS:
        kb.add(lang.upper())  # RU / EN / CN
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / ÈÄâÊã©ËØ≠Ë®Ä:", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text and msg.text.lower() in LANG_OPTIONS)
async def language_selection(message: types.Message):
    user_id = message.from_user.id
    chosen_lang = message.text.lower()  # ru / en / cn
    USER_LANGS[user_id]["language"] = chosen_lang

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[chosen_lang]:
        kb.add(city_name)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)


@dp.message_handler(lambda msg: msg.text and msg.text.lower() in CITY_MAP.keys())
async def city_selection(message: types.Message):
    user_id = message.from_user.id
    city_raw = message.text.lower()
    city_key = CITY_MAP.get(city_raw, "all")
    USER_LANGS[user_id]["city"] = city_key

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await message.reply(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {message.text}. –ù–∞–∂–º–∏—Ç–µ 'Go!' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        reply_markup=kb
    )


@dp.message_handler(lambda msg: msg.text == "Go!")
async def spin_wheel(message: types.Message):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Go!: 80% -> —Ñ–∞–∫—Ç, 20% -> –∫–≤–∏–∑ (–µ—Å–ª–∏ –∫–≤–∏–∑—ã –µ—Å—Ç—å).
    """
    user_id = message.from_user.id
    if user_id not in USER_LANGS:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º /start
        await cmd_start(message)
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ (–ø–æ–ª—Ç–æ—Ä—ã —Å–µ–∫—É–Ω–¥—ã)
    await message.answer("üé° –ö—Ä—É—Ç–∏—Ç—Å—è –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã...")
    await asyncio.sleep(1.5)

    roll = random.randint(1, 100)
    logging.info(f"User {user_id} pressed Go! -> Random roll = {roll}")

    lang = USER_LANGS[user_id]["language"]
    city = USER_LANGS[user_id]["city"]
    facts, quizzes = get_filtered_cards(lang, city)

    if not facts and not quizzes:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞/–≥–æ—Ä–æ–¥–∞.")
        return

    # 20% —à–∞–Ω—Å –∫–≤–∏–∑–∞ (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –∫–≤–∏–∑—ã –µ—Å—Ç—å)
    if roll <= 20 and quizzes:
        quiz_card = random.choice(quizzes)
        await send_quiz_card(message, quiz_card)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–∫—Ç—ã –µ—Å—Ç—å ‚Äî –±–µ—Ä—ë–º —Ñ–∞–∫—Ç. –ò–Ω–∞—á–µ (—Ñ–∞–∫—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∫–≤–∏–∑—ã) ‚Äî –∫–≤–∏–∑
        if facts:
            fact_card = random.choice(facts)
            await send_fact_card(message, fact_card)
        else:
            quiz_card = random.choice(quizzes)
            await send_quiz_card(message, quiz_card)


async def send_fact_card(message: types.Message, card: dict):
    """
    –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–∞–∫—Ç–æ–º, –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Google Maps (disable_web_page_preview).
    """
    text_msg = (
        f"{card.get('icon','')} {card.get('title','')}\n"
        f"{card.get('text','')}"
    )

    loc = card.get("location", {})
    if isinstance(loc, dict):
        addr = loc.get("address", "")
        if addr:
            text_msg += f"\nüìç {addr}"
        gps = loc.get("gps", {})
        if "lat" in gps and "lng" in gps:
            lat, lng = gps["lat"], gps["lng"]
            # –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:
            text_msg += f"\n[{lat},{lng}](https://maps.google.com/?q={lat},{lng})"
    elif isinstance(loc, str):
        # –ï—Å–ª–∏ location ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
        text_msg += f"\nüìç {loc}"

    await message.answer(
        text_msg,
        parse_mode="Markdown",
        disable_web_page_preview=True  # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
    )

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await message.answer("–ù–∞–∂–º–∏—Ç–µ Go! –∏–ª–∏ Return / –í–µ—Ä–Ω—É—Ç—å—Å—è", reply_markup=kb)


async def send_quiz_card(message: types.Message, card: dict):
    """
    –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É-–∫–≤–∏–∑ (interactive=true): –≤–æ–ø—Ä–æ—Å + –≤–∞—Ä–∏–∞–Ω—Ç—ã (inline-–∫–Ω–æ–ø–∫–∏).
    """
    question = card.get("question", "–í–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω.")
    options = card.get("options", [])
    correct_idx = card.get("correct_index", 0)

    kb = types.InlineKeyboardMarkup()
    for i, opt in enumerate(options):
        callback_data = f"quiz:{card.get('id','')}:{i}:{correct_idx}"
        kb.add(types.InlineKeyboardButton(f"{i+1}) {opt}", callback_data=callback_data))

    await message.answer(question, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("quiz:"))
async def process_quiz_answer(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∏–∑–µ.
    –§–æ—Ä–º–∞—Ç callback_data: quiz:<card_id>:<user_choice>:<correct_idx>
    """
    parts = callback_query.data.split(":")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–≤–∏–∑–∞", show_alert=True)
        return

    # quiz_id = parts[1]  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        user_choice = int(parts[2])
        correct_idx = int(parts[3])
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤", show_alert=True)
        return

    if user_choice == correct_idx:
        answer_text = "–í–µ—Ä–Ω–æ!"
    else:
        answer_text = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_idx+1}"

    await callback_query.message.answer(answer_text)
    await callback_query.answer()

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await callback_query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ Go! –∏–ª–∏ Return / –í–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=kb
    )


@dp.message_handler(lambda msg: msg.text == "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def return_handler(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Return / –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî —Å–ø—Ä–æ—Å–∏–º, —á—Ç–æ –º–µ–Ω—è—Ç—å: —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥.
    """
    user_id = message.from_user.id
    curr_lang = USER_LANGS.get(user_id, {}).get("language", "ru")

    if curr_lang == "ru":
        text_ = "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥?"
        opt_lang = "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        opt_city = "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
    elif curr_lang == "en":
        text_ = "What do you want to change: language or city?"
        opt_lang = "Change language"
        opt_city = "Change city"
    else:
        text_ = "ÊÇ®ÊÉ≥Êõ¥Êîπ‰ªÄ‰πàÔºöËØ≠Ë®ÄËøòÊòØÂüéÂ∏ÇÔºü"
        opt_lang = "Êõ¥ÊîπËØ≠Ë®Ä"
        opt_city = "Êõ¥ÊîπÂüéÂ∏Ç"

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(opt_lang, opt_city)
    await message.answer(text_, reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in ["–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "Change language", "Êõ¥ÊîπËØ≠Ë®Ä"])
async def change_language(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" –∏–ª–∏ /lang.
    """
    user_id = message.from_user.id
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang in LANG_OPTIONS:
        kb.add(lang.upper())
    curr_lang = USER_LANGS.get(user_id, {}).get("language", "ru")

    if curr_lang == "ru":
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    elif curr_lang == "en":
        txt = "Select language:"
    else:
        txt = "ÈÄâÊã©ËØ≠Ë®Ä:"
    await message.answer(txt, reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "Change city", "Êõ¥ÊîπÂüéÂ∏Ç"])
async def change_city(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    """
    user_id = message.from_user.id
    lang = USER_LANGS.get(user_id, {}).get("language", "ru")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[lang]:
        kb.add(city_name)

    if lang == "ru":
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    elif lang == "en":
        txt = "Choose city:"
    else:
        txt = "ËØ∑ÈÄâÊã©ÂüéÂ∏ÇÔºö"

    await message.answer(txt, reply_markup=kb)


# -----------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
