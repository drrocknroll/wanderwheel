"""
main.py

–í–µ—Ä—Å–∏—è 1.3.0

- –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ data/cards.json.
- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ (/start, /lang) –∏ –≥–æ—Ä–æ–¥–∞.
- –ö–Ω–æ–ø–∫–∞ "Go!" —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π "–ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...", –≤—ã–≤–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –∏–∑ 5).
- 80% —Ñ–∞–∫—Ç, 20% –∫–≤–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–≤–∏–∑).
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —è–∑—ã–∫—É (ru/en/cn) –∏ –≥–æ—Ä–æ–¥—É (moscow/spb/all).
- Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω.
- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ localization.py.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.
"""

import logging
import random
import json
import asyncio
import os
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from localization import translations  # –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

logging.basicConfig(level=logging.INFO)
logging.info("=== BOT STARTED: 'WanderWheel' VERSION 1.3.0 (Single cards.json) ===")

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
USER_LANGS = {}  # { user_id: {"language": "ru", "city": "moscow"} }
MESSAGE_COUNTERS = {}  # –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –Ø–∑—ã–∫–æ–≤—ã–µ –æ–ø—Ü–∏–∏ (—Ö—Ä–∞–Ω–∏–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º)
LANG_OPTIONS = ["ru", "en", "cn"]

# –ì–æ—Ä–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
CITY_OPTIONS = {
    "ru": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–í—Å–µ"],
    "en": ["Moscow", "Saint Petersburg", "All"],
    "cn": ["Ëé´ÊñØÁßë", "Âú£ÂΩºÂæóÂ†°", "ÂÖ®ÈÉ®"]
}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∫ –∫–ª—é—á—É "moscow"/"spb"/"all"
CITY_MAP = {
    "–º–æ—Å–∫–≤–∞": "moscow",
    "moscow": "moscow",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "saint petersburg": "spb",
    "spb": "spb",
    "Ëé´ÊñØÁßë": "moscow",
    "Âú£ÂΩºÂæóÂ†°": "spb",
    "–≤—Å–µ": "all",
    "all": "all",
    "ÂÖ®ÈÉ®": "all"
}

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
def should_send_message(user_id, msg_key):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ msg_key –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –∏–∑ 5 –≤—ã–∑–æ–≤–æ–≤). –ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
    """
    global MESSAGE_COUNTERS
    if user_id not in MESSAGE_COUNTERS:
        MESSAGE_COUNTERS[user_id] = {}
    if msg_key not in MESSAGE_COUNTERS[user_id]:
        MESSAGE_COUNTERS[user_id][msg_key] = 0
    MESSAGE_COUNTERS[user_id][msg_key] += 1
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–≥–¥–∞ (count % 5) == 1
    return (MESSAGE_COUNTERS[user_id][msg_key] % 5) == 1

# ---------------------------
# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
# ---------------------------
def load_cards() -> list:
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ data/cards.json.
    """
    path = Path(__file__).parent / "data" / "cards.json"
    if not path.exists():
        logging.error(f"cards.json not found: {path}")
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            else:
                logging.error("cards.json –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º JSON-–æ–±—ä–µ–∫—Ç–æ–≤!")
                return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cards.json: {e}")
        return []

def get_filtered_cards(lang: str, city: str) -> (list, list):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ cards.json, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —è–∑—ã–∫—É (lang) –∏ –≥–æ—Ä–æ–¥—É (city),
    —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–∞ —Ñ–∞–∫—Ç—ã –∏ –∫–≤–∏–∑—ã.
    """
    all_cards = load_cards()
    facts = []
    quizzes = []
    lang = lang.lower()
    city = city.lower()
    for c in all_cards:
        card_lang = c.get("language", "").lower()
        if card_lang != lang:
            continue
        card_city = c.get("city", "").lower()
        if not card_city:
            loc = c.get("location", {})
            if isinstance(loc, dict):
                card_city = loc.get("city", "").lower()
            elif isinstance(loc, str):
                card_city = loc.lower()
            else:
                card_city = ""
        if city != "all" and card_city != city:
            continue
        if c.get("interactive", False) is True:
            quizzes.append(c)
        else:
            facts.append(c)
        logging.info(f"CARD_ID={c.get('id')} card_lang={card_lang} card_city={card_city}")
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(facts)} —Ñ–∞–∫—Ç–æ–≤, {len(quizzes)} –∫–≤–∏–∑–æ–≤ –¥–ª—è lang={lang} city={city}")
    return (facts, quizzes)

# ---------------------------
# –ö–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞
# ---------------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    USER_LANGS[user_id] = {"language": "ru", "city": "all"}
    lang = USER_LANGS[user_id]["language"]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("Start / –°—Ç–∞—Ä—Ç")
    welcome_text = translations[lang]["welcome"] + "\n" + translations[lang]["start_prompt"]
    await message.reply(welcome_text, reply_markup=kb)

@dp.message_handler(commands=['lang'])
async def cmd_change_lang(message: types.Message):
    await change_language(message)

@dp.message_handler(lambda msg: msg.text == "Start / –°—Ç–∞—Ä—Ç")
async def choose_language(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang_opt in LANG_OPTIONS:
        kb.add(lang_opt.upper())
    # –ü–æ–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "ru"
    await message.reply(translations["ru"]["choose_language"], reply_markup=kb)

@dp.message_handler(lambda msg: msg.text and msg.text.lower() in LANG_OPTIONS)
async def language_selection(message: types.Message):
    user_id = message.from_user.id
    chosen_lang = message.text.lower()
    USER_LANGS[user_id]["language"] = chosen_lang
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[chosen_lang]:
        kb.add(city_name)
    await message.reply(translations[chosen_lang]["choose_city"], reply_markup=kb)

@dp.message_handler(lambda msg: msg.text and msg.text.lower() in CITY_MAP.keys())
async def city_selection(message: types.Message):
    user_id = message.from_user.id
    lang = USER_LANGS[user_id]["language"]
    city_raw = message.text
    city_key = CITY_MAP.get(city_raw.lower(), "all")
    USER_LANGS[user_id]["city"] = city_key
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    city_selected_text = translations[lang]["city_selected"].format(city=city_raw)
    await message.reply(city_selected_text, reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == "Go!")
async def spin_wheel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in USER_LANGS:
        await cmd_start(message)
        return
    lang = USER_LANGS[user_id]["language"]
    if should_send_message(user_id, "wheel_spinning"):
        await message.answer(translations[lang]["wheel_spinning"])
    await asyncio.sleep(1.5)
    roll = random.randint(1, 100)
    logging.info(f"User {user_id} pressed Go! -> Random roll = {roll}")
    city = USER_LANGS[user_id]["city"]
    facts, quizzes = get_filtered_cards(lang, city)
    if not facts and not quizzes:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞/–≥–æ—Ä–æ–¥–∞.")
        return
    if roll <= 20 and quizzes:
        quiz_card = random.choice(quizzes)
        await send_quiz_card(message, quiz_card)
    else:
        if facts:
            fact_card = random.choice(facts)
            await send_fact_card(message, fact_card)
        else:
            quiz_card = random.choice(quizzes)
            await send_quiz_card(message, quiz_card)

async def send_fact_card(message: types.Message, card: dict):
    user_id = message.from_user.id
    lang = USER_LANGS[user_id]["language"]
    text_msg = (
        f"{card.get('icon','')} {card.get('title','')}\n"
        f"{card.get('text','')}"
    )
    loc = card.get("location", {})
    if isinstance(loc, dict):
        addr = loc.get("address", "")
        if addr:
            text_msg += f"\nüìç {addr}"
        gps = loc.get("gps", {})
        if "lat" in gps and "lng" in gps:
            lat, lng = gps["lat"], gps["lng"]
            text_msg += f"\n[{lat},{lng}](https://maps.google.com/?q={lat},{lng})"
    elif isinstance(loc, str):
        text_msg += f"\nüìç {loc}"
    await message.answer(text_msg, parse_mode="Markdown", disable_web_page_preview=True)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –∏–∑ 5
    if should_send_message(user_id, "go_or_return"):
        await message.answer(translations[lang]["go_or_return"], reply_markup=kb)

async def send_quiz_card(message: types.Message, card: dict):
    lang = USER_LANGS[message.from_user.id]["language"]
    question = card.get("question", "–í–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω.")
    options = card.get("options", [])
    correct_idx = card.get("correct_index", 0)
    kb = types.InlineKeyboardMarkup()
    for i, opt in enumerate(options):
        callback_data = f"quiz:{card.get('id','')}:{i}:{correct_idx}"
        kb.add(types.InlineKeyboardButton(f"{i+1}) {opt}", callback_data=callback_data))
    await message.answer(question, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("quiz:"))
async def process_quiz_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = USER_LANGS[user_id]["language"]
    parts = callback_query.data.split(":")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–≤–∏–∑–∞", show_alert=True)
        return
    try:
        user_choice = int(parts[2])
        correct_idx = int(parts[3])
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤", show_alert=True)
        return
    if user_choice == correct_idx:
        answer_text = translations[lang]["quiz_correct"]
    else:
        answer_text = translations[lang]["quiz_wrong"].format(correct=correct_idx+1)
    await callback_query.message.answer(answer_text)
    await callback_query.answer()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("Go!", "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
    await callback_query.message.answer(translations[lang]["go_or_return"], reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == "Return / –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def return_handler(message: types.Message):
    user_id = message.from_user.id
    lang = USER_LANGS.get(user_id, {}).get("language", "ru")
    text_ = translations[lang]["what_change"]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(translations[lang]["change_language"], translations[lang]["change_city"])
    await message.answer(text_, reply_markup=kb)

@dp.message_handler(lambda msg: msg.text in [translations["ru"]["change_language"], translations["en"]["change_language"], translations["cn"]["change_language"]])
async def change_language(message: types.Message):
    user_id = message.from_user.id
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for lang_opt in LANG_OPTIONS:
        kb.add(lang_opt.upper())
    curr_lang = USER_LANGS.get(user_id, {}).get("language", "ru")
    await message.answer(translations[curr_lang]["choose_language"], reply_markup=kb)

@dp.message_handler(lambda msg: msg.text in [translations["ru"]["change_city"], translations["en"]["change_city"], translations["cn"]["change_city"]])
async def change_city(message: types.Message):
    user_id = message.from_user.id
    lang = USER_LANGS.get(user_id, {}).get("language", "ru")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city_name in CITY_OPTIONS[lang]:
        kb.add(city_name)
    await message.answer(translations[lang]["choose_city"], reply_markup=kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
