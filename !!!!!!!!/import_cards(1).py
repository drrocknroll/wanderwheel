import csv
import json
from pathlib import Path

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º:
CSV_FILE = "data/cards.csv"   # <-- –≤—Ö–æ–¥–Ω–æ–π CSV
JSON_FILE = "data/cards.json" # <-- –∏—Ç–æ–≥–æ–≤—ã–π JSON

def import_cards():
    """
    –ß–∏—Ç–∞–µ—Ç CSV_FILE, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π card[] –∏
    –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ JSON_FILE (cards.json).
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ CSV –∏–º–µ–µ—Ç —Å—Ç–æ–ª–±—Ü—ã (–≤ –ø–æ—Ä—è–¥–∫–µ):
    
    1. id
    2. interactive       ("true"/"false")
    3. language          ("ru","en","cn")
    4. city              ("moscow","spb","all" –∏–ª–∏ –ø—É—Å—Ç–æ)
    5. address
    6. gps_lat
    7. gps_lng
    8. title
    9. text
    10. question
    11. options
    12. correct_index
    13. reality          ("fact","legend","fantasy", etc.)
    14. explanation
    15. routes
    16. persons
    17. tags            (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ 17 —Å—Ç–æ–ª–±—Ü–æ–≤)
    """

    # 1) –°—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cards.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cards_path = Path(JSON_FILE)
    if cards_path.exists():
        with open(cards_path, "r", encoding="utf-8") as f:
            existing_cards = json.load(f)
    else:
        existing_cards = []

    # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º existing_cards –≤ dict –ø–æ id, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–µ–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
    cards_dict = {}
    for c in existing_cards:
        if isinstance(c, dict) and "id" in c:
            cards_dict[c["id"]] = c

    # 2) –ß–∏—Ç–∞–µ–º CSV
    csv_path = Path(CSV_FILE)
    if not csv_path.exists():
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω CSV-—Ñ–∞–π–ª: {CSV_FILE}")
        return

    with open(csv_path, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        header = next(reader)  # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for row in reader:
            # –ï—Å–ª–∏ —É –≤–∞—Å —Ä–æ–≤–Ω–æ 16 —Å—Ç–æ–ª–±—Ü–æ–≤ –±–µ–∑ tags, —É–±–µ—Ä–∏—Ç–µ "tags_str" –∏–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            if len(row) < 16:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—Ç—Ä–æ–∫–µ: {row}")
                continue

            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å 17 —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤–∫–ª—é—á–∞—è tags):
            # id,interactive,language,city,address,gps_lat,gps_lng,
            # title,text,question,options,correct_index,reality,
            # explanation,routes,persons,tags
            # –ï—Å–ª–∏ tags –Ω–µ—Ç, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –Ω–∞ 1 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            # –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É len(row) == 16
            if len(row) == 16:
                # –ë–µ–∑ tags
                ( card_id,
                  interactive_str,
                  language,
                  city,
                  address,
                  gps_lat_str,
                  gps_lng_str,
                  title,
                  text,
                  question,
                  options_str,
                  correct_index_str,
                  reality_str,
                  explanation,
                  routes_str,
                  persons_str
                ) = row
                tags_str = ""  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            else:
                ( card_id,
                  interactive_str,
                  language,
                  city,
                  address,
                  gps_lat_str,
                  gps_lng_str,
                  title,
                  text,
                  question,
                  options_str,
                  correct_index_str,
                  reality_str,
                  explanation,
                  routes_str,
                  persons_str,
                  tags_str
                ) = row

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
            interactive = (interactive_str.strip().lower() == "true")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º language/city –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            lang_val = language.strip().lower()
            city_val = city.strip().lower()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GPS
            gps_lat = float(gps_lat_str) if gps_lat_str.strip() else None
            gps_lng = float(gps_lng_str) if gps_lng_str.strip() else None

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º options
            if options_str.strip():
                options_list = [o.strip() for o in options_str.split(";")]
            else:
                options_list = []

            correct_idx = None
            if correct_index_str.strip():
                correct_idx = int(correct_index_str.strip())

            # reality -> icon
            # e.g. "fact" -> üìñ, "legend" -> üßôüèª‚Äç‚ôÇÔ∏è, –∏–Ω–∞—á–µ –ª—é–±–∞—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞
            reality = reality_str.strip().lower()
            if reality == "legend":
                icon_val = "üßôüèª‚Äç‚ôÇÔ∏è"
            else:
                # –î–ª—è –ø—Ä–æ—á–∏—Ö (fact, fantasy, etc.) –∏—Å–ø–æ–ª—å–∑—É–µ–º üìñ
                icon_val = "üìñ"

            # routes, persons, tags
            routes_list = []
            if routes_str.strip():
                routes_list = [r.strip() for r in routes_str.split(";")]

            persons_list = []
            if persons_str.strip():
                persons_list = [p.strip() for p in persons_str.split(";")]

            tags_list = []
            if tags_str.strip():
                tags_list = [t.strip() for t in tags_str.split(";")]

            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏
            card_data = {
                "id": card_id.strip(),
                "interactive": interactive,
                "language": lang_val,
                "city": city_val,
                "icon": icon_val,
                "title": title.strip(),
                "text": text.strip(),
                "question": question.strip() if interactive else "",
                "options": options_list if interactive else [],
                "correct_index": correct_idx if interactive else None,
                "reality": reality,
                "explanation": explanation.strip() if interactive else "",
                "routes": routes_list,
                "persons": persons_list,
                "tags": tags_list,
                "location": {}
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º location
            loc_dict = {}
            if address.strip():
                loc_dict["address"] = address.strip()
            if gps_lat is not None and gps_lng is not None:
                loc_dict["gps"] = {"lat": gps_lat, "lng": gps_lng}

            if loc_dict:
                card_data["location"] = loc_dict

            # –û–±–Ω–æ–≤–ª—è–µ–º / —Å–æ–∑–¥–∞—ë–º –≤ cards_dict
            cards_dict[card_data["id"]] = card_data

    # 3) –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º cards_dict –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
    final_cards = list(cards_dict.values())

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cards.json
    with open(cards_path, "w", encoding="utf-8") as f:
        json.dump(final_cards, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(final_cards)}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import_cards()
