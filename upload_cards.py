import csv
import json
from pathlib import Path

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
CSV_FILE = "data/new_cards.csv"
JSON_FILE = "data/cards.json"

def upload_cards():
    """
    –ß–∏—Ç–∞–µ—Ç CSV_FILE (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';') –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç JSON_FILE (cards.json),
    –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∑–∞–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥—É–±–ª–∏ –ø–æ id.
    """
    # 1. –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cards_path = Path(JSON_FILE)
    if cards_path.exists() and cards_path.stat().st_size > 0:
        try:
            with open(cards_path, "r", encoding="utf-8") as f:
                existing_cards = json.load(f)
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –§–∞–π–ª cards.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç. –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∑–∞–Ω–æ–≤–æ.")
            existing_cards = []
    else:
        existing_cards = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ id –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cards_dict = {}
    for card in existing_cards:
        if isinstance(card, dict) and "id" in card:
            cards_dict[card["id"]] = card
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    existing_ids = set(cards_dict.keys())
    
    # 2. –û—Ç–∫—Ä—ã—Ç–∏–µ CSV-—Ñ–∞–π–ª–∞
    csv_path = Path(CSV_FILE)
    if not csv_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CSV-—Ñ–∞–π–ª: {CSV_FILE}")
        return
    
    with open(csv_path, "r", encoding="utf-8") as f:
        reader = csv.reader(f, delimiter=';', quotechar='"')
        header = next(reader, None)  # —á—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if header is None:
            print("‚ùå CSV-—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        new_count = 0
        updated_count = 0
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ CSV
        for row_num, row in enumerate(reader, start=2):
            if len(row) < 16:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {row}")
                continue
            
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–æ–ª–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ (—Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è 'tags')
            if len(row) == 16:
                (card_id, interactive_str, language, city, address,
                 gps_lat_str, gps_lng_str, title, text, question,
                 options_str, correct_index_str, reality_str, explanation,
                 routes_str, persons_str) = row
                tags_str = ""
            else:
                (card_id, interactive_str, language, city, address,
                 gps_lat_str, gps_lng_str, title, text, question,
                 options_str, correct_index_str, reality_str, explanation,
                 routes_str, persons_str, tags_str) = row
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            card_id = card_id.strip()
            interactive = interactive_str.strip().lower() == "true"
            lang_val = language.strip().lower()
            city_val = city.strip().lower()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if card_id in existing_ids:
                updated_count += 1
            else:
                new_count += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ float (–µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç—ã–µ)
            gps_lat = None
            gps_lng = None
            if gps_lat_str.strip():
                try:
                    gps_lat = float(gps_lat_str.strip())
                except ValueError:
                    gps_lat = None
            if gps_lng_str.strip():
                try:
                    gps_lng = float(gps_lng_str.strip())
                except ValueError:
                    gps_lng = None
            
            # –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (options) –ø–æ ';'
            options_list = []
            if options_str.strip():
                options_list = [opt.strip() for opt in options_str.split(';')]
            
            # –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            correct_idx = None
            if correct_index_str.strip():
                try:
                    correct_idx = int(correct_index_str.strip())
                except ValueError:
                    correct_idx = None
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É (reality)
            reality_val = reality_str.strip().lower()
            if reality_val == "legend":
                icon_val = "üßôüèª‚Äç‚ôÇÔ∏è"
            else:
                icon_val = "üìñ"
            
            # –†–∞–∑–±–∏–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –ø–µ—Ä—Å–æ–Ω –∏ —Ç–µ–≥–æ–≤ –Ω–∞ —Å–ø–∏—Å–∫–∏
            routes_list = [route.strip() for route in routes_str.split(';') if route.strip()]
            persons_list = [person.strip() for person in persons_str.split(';') if person.strip()]
            tags_list = [tag.strip() for tag in tags_str.split(';') if tag.strip()]
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
            card_data = {
                "id": card_id,
                "interactive": interactive,
                "language": lang_val,
                "city": city_val,
                "icon": icon_val,
                "title": title.strip().strip('"'),
                "text": text.strip().strip('"'),
                "question": question.strip() if interactive else "",
                "options": options_list if interactive else [],
                "correct_index": correct_idx if interactive else None,
                "reality": reality_val,
                "explanation": explanation.strip() if interactive else "",
                "routes": routes_list,
                "persons": persons_list,
                "tags": tags_list,
                "location": {}
            }
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è location –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            loc_obj = {}
            if address.strip():
                loc_obj["address"] = address.strip().strip('"')
            if gps_lat is not None and gps_lng is not None:
                loc_obj["gps"] = {"lat": gps_lat, "lng": gps_lng}
            if loc_obj:
                card_data["location"] = loc_obj
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ id
            cards_dict[card_id] = card_data
        
    # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON
    final_cards = list(cards_dict.values())
    with open(cards_path, "w", encoding="utf-8") as json_file:
        json.dump(final_cards, json_file, ensure_ascii=False, indent=2)
    
    # 5. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {new_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")

# –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    upload_cards()
