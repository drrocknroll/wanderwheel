import csv
import json
from pathlib import Path

# –ü—É—Å—Ç—å —É –Ω–∞—Å —Ñ–∞–π–ª—ã:
CSV_FILE = "data/new_cards.csv"
JSON_FILE = "data/cards.json"

def import_cards():
    """
    –ß–∏—Ç–∞–µ—Ç CSV_FILE (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';'), —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç JSON_FILE (cards.json).
    """
    # 1) –°—á–∏—Ç—ã–≤–∞–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cards.json
    cards_path = Path(JSON_FILE)
    if cards_path.exists() and cards_path.stat().st_size > 0:
        try:
            with open(cards_path, "r", encoding="utf-8") as f:
                existing_cards = json.load(f)
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –§–∞–π–ª cards.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç. –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∑–∞–Ω–æ–≤–æ.")
            existing_cards = []
    else:
        existing_cards = []

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ dict –ø–æ id, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å
    cards_dict = {}
    for c in existing_cards:
        if isinstance(c, dict) and "id" in c:
            cards_dict[c["id"]] = c

    # 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º CSV. delimiter=';'
    csv_path = Path(CSV_FILE)
    if not csv_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CSV-—Ñ–∞–π–ª: {CSV_FILE}")
        return

    with open(csv_path, "r", encoding="utf-8") as f:
        reader = csv.reader(f, delimiter=';', quotechar='"')
        header = next(reader, None)  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        if header is None:
            print("‚ùå CSV-—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤).")
            return

        # –û–∂–∏–¥–∞–µ–º 16 –∏–ª–∏ 17 —Å—Ç–æ–ª–±—Ü–æ–≤
        for row_num, row in enumerate(reader, start=2):
            if len(row) < 16:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {row}")
                continue

            # –ï—Å–ª–∏ tags –Ω–µ—Ç, len(row) == 16
            if len(row) == 16:
                ( card_id,
                  interactive_str,
                  language,
                  city,
                  address,
                  gps_lat_str,
                  gps_lng_str,
                  title,
                  text,
                  question,
                  options_str,
                  correct_index_str,
                  reality_str,
                  explanation,
                  routes_str,
                  persons_str
                ) = row
                tags_str = ""
            else:
                # len(row) == 17, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å tags
                ( card_id,
                  interactive_str,
                  language,
                  city,
                  address,
                  gps_lat_str,
                  gps_lng_str,
                  title,
                  text,
                  question,
                  options_str,
                  correct_index_str,
                  reality_str,
                  explanation,
                  routes_str,
                  persons_str,
                  tags_str
                ) = row

            interactive = (interactive_str.strip().lower() == "true")
            lang_val = language.strip().lower()
            city_val = city.strip().lower()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GPS
            gps_lat = None
            gps_lng = None
            if gps_lat_str.strip():
                try:
                    gps_lat = float(gps_lat_str.strip())
                except ValueError:
                    pass
            if gps_lng_str.strip():
                try:
                    gps_lng = float(gps_lng_str.strip())
                except ValueError:
                    pass

            # options (–¥–ª—è –∫–≤–∏–∑–∞)
            options_list = []
            if options_str.strip():
                # –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ CSV, –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã ;
                # –Ω–æ csv.reader —É–∂–µ —Ä–∞–∑–¥–µ–ª–∏–ª –∫–æ–ª–æ–Ω–∫–∏,
                # —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ ';'
                options_list = [o.strip() for o in options_str.split(';')]

            correct_idx = None
            if correct_index_str.strip():
                try:
                    correct_idx = int(correct_index_str.strip())
                except ValueError:
                    pass

            # reality -> icon
            reality_val = reality_str.strip().lower()
            if reality_val == "legend":
                icon_val = "üßôüèª‚Äç‚ôÇÔ∏è"
            else:
                icon_val = "üìñ"

            # routes
            routes_list = []
            if routes_str.strip():
                routes_list = [r.strip() for r in routes_str.split(';')]

            # persons
            persons_list = []
            if persons_str.strip():
                persons_list = [p.strip() for p in persons_str.split(';')]

            # tags
            tags_list = []
            if tags_str.strip():
                tags_list = [t.strip() for t in tags_str.split(';')]

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            card_data = {
                "id": card_id.strip(),
                "interactive": interactive,
                "language": lang_val,
                "city": city_val,
                "icon": icon_val,
                "title": title.strip().strip('"'),
                "text": text.strip().strip('"'),
                "question": question.strip() if interactive else "",
                "options": options_list if interactive else [],
                "correct_index": correct_idx if interactive else None,
                "reality": reality_val,
                "explanation": explanation.strip() if interactive else "",
                "routes": routes_list,
                "persons": persons_list,
                "tags": tags_list,
                "location": {}
            }

            loc_obj = {}
            if address.strip():
                loc_obj["address"] = address.strip().strip('"')
            if gps_lat is not None and gps_lng is not None:
                loc_obj["gps"] = {"lat": gps_lat, "lng": gps_lng}
            if loc_obj:
                card_data["location"] = loc_obj

            cards_dict[ card_data["id"] ] = card_data

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    final_cards = list(cards_dict.values())
    with open(cards_path, "w", encoding="utf-8") as wf:
        json.dump(final_cards, wf, ensure_ascii=False, indent=2)

    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(final_cards)}")

if __name__ == "__main__":
    import_cards()
